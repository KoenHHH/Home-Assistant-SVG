type: custom:button-card
entity: binary_sensor.motion_sensor
show_name: false
show_icon: false
triggers_update:
  - binary_sensor.motion_sensor
custom_fields:
  motion: |
    [[[
      // Get the entity ID of the motion sensor
      let entity_id = 'binary_sensor.motion_sensor';
      let state = states[entity_id].state; // 'on' or 'off'
      let displayState = state === 'on' ? 'detected' : 'not detected';
      
      // Layout configuration
      let divDisplay = 'flex';
      let widthSVG = '100%';
      let heightSVG = 'auto';
      let paddingDIV = '0';
     
      // Text configuration
      let fontSizeMotion = '32px';
      let fontSizeName = '32px';
      let fontWeight = 'bold';
      let textTransform = 'uppercase';

      // Color configuration for different states
      let color_inactive = '#f0f0f0'; // Light gray for inactive state
      let color_active = '#f44336';  // Red color when motion detected
      let sensorBaseColor = '#e0e0e0'; // Base color of the sensor body
      
      // Additional styling options
      let nameColor = 'white';
      let displayName1 = 'visible';
      let displayName2 = 'visible';
      let displayStatus = 'visible';
      
      // Split name configuration
      let wordLimit = 2;
      
      // Get friendly name of entity or format entity ID
      let entity_name = states[entity_id].attributes?.friendly_name ||
                        entity_id.replace(/binary_sensor\./, '').replace(/_/g, ' ');

      // Split entity name for multi-line display
      let words = entity_name.split(" ");
      let firstWords = words.slice(0, wordLimit).join(" ") || " ";
      let restOfName = words.slice(wordLimit).join(" ") || " ";

      // Generate and return the SVG visualization
      return `
        <div style="display: ${divDisplay}; flex-direction: column; align-items: center; padding: ${paddingDIV};">
          <svg viewBox="0 0 300 240" width="${widthSVG}" height="${heightSVG}" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <!-- Shadow filter for base -->
              <filter id="baseShadow" x="-20%" y="-20%" width="140%" height="140%">
                <feDropShadow dx="2" dy="2" stdDeviation="3" flood-opacity="0.3" />
              </filter>
              
              <!-- Shadow and highlight effects for the dome to create 3D effect -->
              <filter id="dome3D" x="-50%" y="-50%" width="200%" height="200%">
                <!-- Drop shadow for depth -->
                <feGaussianBlur in="SourceAlpha" stdDeviation="2" result="blur" />
                <feOffset dx="1" dy="1" result="offsetBlur" />
                <feComponentTransfer result="shadow">
                  <feFuncA type="linear" slope="0.4" />
                </feComponentTransfer>
                
                <!-- Lighting effect from top-left for 3D -->
                <feSpecularLighting in="blur" surfaceScale="5" specularConstant="0.8" 
                                    specularExponent="20" lighting-color="#ffffff" result="specOut">
                  <fePointLight x="50" y="20" z="100" />
                </feSpecularLighting>
                <feComposite in="specOut" in2="SourceAlpha" operator="in" result="specOut2" />
                <feComposite in="SourceGraphic" in2="specOut2" operator="arithmetic" 
                            k1="0" k2="1" k3="1" k4="0" result="litSource" />
                
                <!-- Combine all effects -->
                <feMerge>
                  <feMergeNode in="offsetBlur" />
                  <feMergeNode in="litSource" />
                </feMerge>
              </filter>
              
              <!-- Base curve/edge effect for the body -->
              <linearGradient id="baseEdgeGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stop-color="#ffffff" stop-opacity="0.9" />
                <stop offset="100%" stop-color="#d0d0d0" stop-opacity="1" />
              </linearGradient>
              
              <!-- Gradients for states -->
              <radialGradient id="inactiveGradient" cx="0.5" cy="0.5" r="0.7" fx="0.3" fy="0.3">
                <stop offset="0%" stop-color="#ffffff" />
                <stop offset="70%" stop-color="${color_inactive}" />
                <stop offset="100%" stop-color="#d0d0d0" />
              </radialGradient>
              
              <radialGradient id="activeGradient" cx="0.5" cy="0.5" r="0.7" fx="0.3" fy="0.3">
                <stop offset="0%" stop-color="#ff8a80" />
                <stop offset="70%" stop-color="${color_active}" />
                <stop offset="100%" stop-color="#b71c1c" />
              </radialGradient>
            </defs>
            
            <style>
              @keyframes blink {
                0%, 100% { fill: url(#activeGradient); }
                50% { fill: url(#inactiveGradient); }
              }
              .sensor-dome-inactive {
                fill: url(#inactiveGradient);
              }
              .sensor-dome-active {
                fill: url(#activeGradient);
                animation: blink 2s ease-in-out infinite;
              }
              .data {
                text-transform: ${textTransform};
              }
              
              /* Edge effect on base to enhance depth */
              .sensor-base {
                fill: url(#baseEdgeGradient);
              }
            </style> 
            
            <!-- Motion Sensor Structure -->
            <!-- First create a subtle indentation in the base where the dome sits -->
            <rect x="100" y="15" width="100" height="100" rx="20" ry="20" 
                  class="sensor-base" filter="url(#baseShadow)" />
                  
            <!-- Circular indentation where the dome sits -->
            <circle cx="150" cy="65" r="34" fill="#f5f5f5" />
            
            <!-- Dome highlight ring (creates impression of edge where dome meets base) -->
            <circle cx="150" cy="65" r="33" fill="#f8f8f8" />
            
            <!-- Circular dome in the center with 3D effect -->
            <circle cx="150" cy="65" r="30" 
                    class="${state === 'on' ? 'sensor-dome-active' : 'sensor-dome-inactive'}" 
                    filter="url(#dome3D)" />
            
            <!-- Status text -->
            <text text-anchor="middle" x="150" y="150" class="data" display="${displayStatus}" 
                  font-size="${fontSizeMotion}" font-weight="${fontWeight}" fill="${nameColor}">
              ${displayState}
            </text>
            <text text-anchor="middle" x="150" y="190" class="data" display="${displayName1}" 
                  font-size="${fontSizeName}" font-weight="${fontWeight}" fill="${nameColor}">
              ${firstWords}
            </text>
            <text text-anchor="middle" x="150" y="220" class="data" display="${displayName2}" 
                  font-size="${fontSizeName}" font-weight="${fontWeight}" fill="${nameColor}">
              ${restOfName}
            </text>
          </svg>
        </div>
      `;
    ]]]
styles:
  card:
    - position: relative
    - display: block
    - width: 100%
