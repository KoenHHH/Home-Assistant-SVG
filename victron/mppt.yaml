type: custom:button-card
entity: sensor.mppt_yield_today
show_name: false
show_icon: false
tap_action:
  action: navigate
  navigation_path: ""
triggers_update:
  - sensor.mppt_yield_today
  - sensor.mppt_state
  - sensor.mppt_power
  - sensor.mppt_current
  - binary_sensor.mppt_bms
  - binary_sensor.mppt_ve_can
  - sensor.mppt_mppoperationmode
  - sensor.mppt_battery_voltage
custom_fields:
mppt_controller: |
    [[[ 
      // Get yield value from the sensor
      let yieldValue = parseFloat(states['sensor.mppt_yield_today'].state || 0);
      
      // Get entity name from the sensor
      let entityName = states['sensor.mppt_yield_today'].attributes?.friendly_name || 
                      'sensor.mppt_yield_today'.replace(/sensor\./, '').replace(/_/g, ' ');
      
      // Get MPPT mode if available
      let mppMode = states['sensor.mppt_mppoperationmode']?.state || '1';
      
      // Get BMS and VE CAN states
      let bmsConnected = states['binary_sensor.mppt_bms']?.state === 'on';
      let veCanConnected = states['binary_sensor.mppt_ve_can']?.state === 'on';
      
      // Get Power and Amp
      let pvPower = parseFloat(states['sensor.mppt_power'].state || 0);
      let pvAmp = parseFloat(states['sensor.mppt_current'].state || 0);
      
      // Try to get battery voltage if available
      let batteryVoltage = parseFloat(states['sensor.mppt_battery_voltage']?.state || 0);

      let widthSVG = '100%';
      let heightSVG = 'auto';
      let paddingDIV = '5px';

      let fontSizeName = '35px';
      let fontWeight = 'bold';
      let textTransform = 'uppercase';
      
      // Colors
      let mainBlue = '#2a7ab9';
      let orange = '#e95e16';
      let connectedColor = '#67abe5';
      let disconnectedColor = '#ff0000';
      
      // Calculate fill percentage (max at 15 kWh)
      let maxYield = 15; 
      let fillPercentage = Math.min(100, (yieldValue / maxYield) * 100);
      
      // Status indicators (different colors for different states)
      let statusColor1 = '#333'; 
      let statusColor2 = '#333';   
      let statusColor3 = '#333';
      
      let blinkClass1 = '';
      let blinkClass2 = '';
      let blinkClass3 = '';
      
      // Infer charging state based on available data
      // This is a simplified approach that may need to be adjusted based on your system
      
      // Default to BULK when active, otherwise retain last state
      let inferredChargingState = "BULK"; // Default state
      
      // Last known state - this would ideally be stored in a sensor or helper
      // For now we'll use localStorage if available to persist across refreshes
      let lastKnownState = "BULK";
      
      try {
        if (window.localStorage) {
          lastKnownState = window.localStorage.getItem('mpptLastChargingState') || "BULK";
        }
      } catch (e) {
        // localStorage might not be available, ignore
      }
      
      // Simple inference logic based on power and current
      if (pvPower > 10) { // If there's significant power
        if (pvPower > 100 && pvAmp > 5) {
          // High power and current typically indicates BULK charging
          inferredChargingState = "BULK";
        } else if (pvPower > 50 && pvAmp > 2 && pvAmp < 5) {
          // Medium power and current may indicate ABSORPTION
          inferredChargingState = "ABSORPTION";
        } else if (pvPower < 50 && pvAmp < 2) {
          // Low power and current may indicate FLOAT
          inferredChargingState = "FLOAT";
        }
        
        // Save the inferred state for future reference
        try {
          if (window.localStorage) {
            window.localStorage.setItem('mpptLastChargingState', inferredChargingState);
          }
        } catch (e) {
          // Ignore localStorage errors
        }
      } else {
        // If no significant power, use the last known state
        inferredChargingState = lastKnownState;
      }
      
      // Set LED colors based on the inferred charging state
      if (inferredChargingState === "BULK") {
        statusColor1 = '#67abe5';
        statusColor2 = '#333';
        statusColor3 = '#333';
        blinkClass1 = 'blink';
      } else if (inferredChargingState === "ABSORPTION") {
        statusColor1 = '#333';
        statusColor2 = '#c8a54d';
        statusColor3 = '#333';
        blinkClass2 = 'blink';
      } else if (inferredChargingState === "FLOAT") {
        statusColor1 = '#333';
        statusColor2 = '#333';
        statusColor3 = '#6fb06e';
        blinkClass3 = 'blink';
      }
      
      return `
        <div style="width: 100%; padding: ${paddingDIV}; position: relative;">
          <svg width="${widthSVG};" height="${heightSVG}" viewBox="0 0 300 240" xmlns="http://www.w3.org/2000/svg">
            <style>
            .blink {
              animation: blink-animation 3s steps(2, start) infinite;
            }
            @keyframes blink-animation {
              to { visibility: hidden; }
            }
              .text {
                text-transform: ${textTransform};
              }
            </style>  
            <!-- Main blue body with rounded corners -->
            <rect x="20" y="20" width="240" height="200" rx="10" ry="10" fill="${mainBlue}" />
            
            <!-- Entity name display area (top bar) -->
            <text class="text" x="130" y="80" text-anchor="middle" font-size="${fontSizeName}" fill="white" font-weight="${fontWeight}">
              ${entityName.length > 20 ? entityName.substring(0, 12) : entityName}
            </text>
            
            <!-- Progress bar (orange) -->
            <rect x="55" y="90" width="160" height="25" rx="3" ry="3" fill="${orange}" />
            <rect x="60" y="155" width="${fillPercentage * 1.1}" height="10" rx="3" ry="3" fill="${orange}" />
            
            <!-- Yield value display -->
            <text x="110" y="150" text-anchor="middle" font-size="35px" fill="white" font-weight="${fontWeight}">
              ${yieldValue.toFixed(2)} kWh
            </text>
            
            <!-- Battery/PV text -->
            <text class="text" x="135" y="195" text-anchor="end" font-size="12" fill="white" font-weight="${fontWeight}">Battery</text>
            <text class="text" x="165" y="195" text-anchor="end" font-size="12" fill="white" font-weight="${fontWeight}">PV</text>
            
            <!-- BMS and VE CAN indicators (added as requested) -->
            <rect x="40" y="215" width="12" height="12" fill="${bmsConnected ? connectedColor : disconnectedColor}" />
            <text class="text" x="50" y="200" text-anchor="middle" font-size="12" fill="white" font-weight="${fontWeight}" transform="rotate(270, 50, 200)">BMS</text>
            
            <rect x="60" y="215" width="12" height="12" fill="${veCanConnected ? connectedColor : disconnectedColor}" />
            <text class="text" x="80" y="190" text-anchor="middle" font-size="12" fill="white" font-weight="${fontWeight}" transform="rotate(270, 80, 200)">VE CAN</text>
            
            <!-- Control buttons area at bottom -->
            <circle cx="110" cy="220" r="8" fill="#999" />
            <circle cx="130" cy="220" r="8" fill="#999" />
            <circle cx="150" cy="220" r="8" fill="#999" />
            <circle cx="170" cy="220" r="8" fill="#999" />
            <text class="text" x="110" y="210" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}">+</text>
            <text class="text" x="130" y="210" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}">-</text>
            <text class="text" x="150" y="210" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}">-</text>
            <text class="text" x="170" y="210" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}">+</text>
            
            <!-- Status indicators -->
            <circle class="${blinkClass1}" cx="210" cy="200" r="6" fill="${statusColor1}" />
            <text class="text" x="265" y="172" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}" transform="rotate(270, 242, 200)">Bulk</text>
            <circle class="${blinkClass2}" cx="226" cy="200" r="6" fill="${statusColor2}" />
            <text class="text" x="280" y="190" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}" transform="rotate(270, 242, 200)">Absorption</text>
            <circle class="${blinkClass3}" cx="242" cy="200" r="6" fill="${statusColor3}" />
            <text class="text" x="265" y="205" text-anchor="middle" font-size="14" fill="white" font-weight="${fontWeight}" transform="rotate(270, 242, 200)">Float</text>

            <!-- Power and Amp -->
            <text x="125" y="110" text-anchor="end" font-size="20" fill="white" font-weight="${fontWeight}">${pvPower} W</text>
            <text x="200" y="110" text-anchor="end" font-size="20" fill="white" font-weight="${fontWeight}">${pvAmp} A</text>
            
            <!-- Debug text for inferred state - you can remove this later -->
            <text x="150" y="175" text-anchor="middle" font-size="10" fill="white">${inferredChargingState}</text>
            
          </svg>
        </div>
      `;
    ]]]
styles:
  card:
    - position: relative
    - display: block
    - width: 100%
