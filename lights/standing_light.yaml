type: custom:button-card
entity: light.your_light_entity # Change to your light or switch entity
show_name: false
show_icon: false
triggers_update:
  - light.your_light_entity # Add additional entities to monitor for updates if needed
custom_fields:
  light: |
    [[[
      // Get the entity ID (works with both light and switch entities)
      let entity_id = 'light.your_light_entity'; // Change to your light or switch entity
      let state = states[entity_id].state; // 'on' or 'off'
      let displayState = state === 'on' ? 'on' : 'off';
      
      // Get brightness and color attributes from the entity
      let attributes = states[entity_id].attributes || {};
      let brightness = attributes.brightness || 255; // Default to max brightness
      let brightnessPercent = Math.round((brightness / 255) * 100); // Convert to percentage
      
      // Get color from entity - could be rgb_color, hs_color, or xy_color
      let color = '#ffeb3b'; // Default yellow color
      
      if (attributes.rgb_color) {
        // RGB format
        let rgb = attributes.rgb_color;
        color = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;
      } else if (attributes.hs_color) {
        // HS format (hue, saturation)
        let hue = attributes.hs_color[0];
        let saturation = attributes.hs_color[1];
        // Convert HSL to RGB (simplified)
        let h = hue / 360;
        let s = saturation / 100;
        let l = 0.5; // Fixed lightness for simplicity
        
        let r, g, b;
        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          const hue2rgb = (p, q, t) => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1/6) return p + (q - p) * 6 * t;
            if (t < 1/2) return q;
            if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
          };
          
          const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          const p = 2 * l - q;
          r = hue2rgb(p, q, h + 1/3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1/3);
        }
        
        color = `rgb(${Math.round(r * 255)}, ${Math.round(g * 255)}, ${Math.round(b * 255)})`;
      } else if (attributes.color_name) {
        // Named color
        color = attributes.color_name;
      }
      
      // Layout configuration
      let divDisplay = 'flex';
      let widthSVG = '100%';
      let heightSVG = 'auto';
      let paddingDIV = '0';

      // move SVG (0 is center)
      let translateX = '-60px';
      let translateY = '30px';
     
      // Text configuration
      let fontSizeDegrees = '32px';
      let fontSizeName = '32px';
      let fontSizeStatus = '32px';
      let fontWeight = 'bold';
      let textTransform = 'uppercase';

      // Color configuration for different states
      let color_inactive = '#f0f0f0'; // Light gray for inactive state
      let color_active = color;        // Use the color from the entity
      let metalBaseColor = '#222222';  // Dark color for the lamp base
      let lampBodyColor = '#222222';   // Dark color for the lamp body
      
      // Glow intensity - ensure it's bright at 100%
      let glowIntensity = Math.max(5, 10 * (brightnessPercent / 100));
      
      // Additional styling options
      let nameColor = 'white';
      let displayName1 = 'visible';
      let displayName2 = 'visible';
      let displayStatus = 'visible';
      let displayBrightness = 'visible';
      
      // Split name configuration
      let wordLimit = 2;
      
      // Get friendly name of entity or format entity ID
      let entity_name = states[entity_id].attributes?.friendly_name ||
                        entity_id.replace(/light\./, '').replace(/switch\./, '').replace(/_/g, ' ');

      // Split entity name for multi-line display
      let words = entity_name.split(" ");
      let firstWords = words.slice(0, wordLimit).join(" ") || " ";
      let restOfName = words.slice(wordLimit).join(" ") || " ";

      // Generate and return the SVG visualization
      return `
        <div style="display: ${divDisplay}; flex-direction: column; align-items: center; padding: ${paddingDIV};">
          <svg viewBox="0 0 300 240" width="${widthSVG}" height="${heightSVG}" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <!-- Shadow filter for lamp -->
              <filter id="lampShadow" x="-20%" y="-20%" width="140%" height="140%">
                <feDropShadow dx="2" dy="2" stdDeviation="3" flood-opacity="0.3" />
              </filter>
              
              <!-- Glow effect for when light is on -->
              <filter id="lightGlow" x="-50%" y="-50%" width="200%" height="200%">
                <feGaussianBlur stdDeviation="${state === 'on' ? glowIntensity : 0}" result="blur" />
                <feComposite in="SourceGraphic" in2="blur" operator="over" />
              </filter>

              <!-- Base gradient -->
              <linearGradient id="baseGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stop-color="#444444" />
                <stop offset="50%" stop-color="${metalBaseColor}" />
                <stop offset="100%" stop-color="#111111" />
              </linearGradient>
              
              <!-- Outer U shape gradient -->
              <linearGradient id="outerUGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stop-color="#333333" />
                <stop offset="50%" stop-color="#000000" />
                <stop offset="100%" stop-color="#333333" />
              </linearGradient>
              
              <!-- Inner light gradient when inactive -->
              <linearGradient id="innerInactiveGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stop-color="#666666" />
                <stop offset="100%" stop-color="#444444" />
              </linearGradient>
              
              <!-- Inner light gradient when active - using entity color -->
              <linearGradient id="innerActiveGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stop-color="#ffffff" />
                <stop offset="50%" stop-color="${color_active}" />
                <stop offset="100%" stop-color="#ffffff" />
              </linearGradient>
            </defs>
            
            <style>
              @keyframes glow {
                0%, 100% { opacity: ${state === 'on' ? 0.9 : 0}; }
                50% { opacity: ${state === 'on' ? 1 : 0}; }
              }
              .lamp-base {
                fill: url(#baseGradient);
                filter: url(#lampShadow);
              }
              .outer-u {
                fill: none;
                stroke: url(#outerUGradient);
                stroke-width: 10;
                stroke-linecap: round;
                filter: url(#lampShadow);
              }
              .inner-light-inactive {
                fill: none;
                stroke: url(#innerInactiveGradient);
                stroke-width: 6;
                stroke-linecap: round;
              }
              .inner-light-active {
                fill: none;
                stroke: url(#innerActiveGradient);
                stroke-width: 6;
                stroke-linecap: round;
                filter: url(#lightGlow);
                animation: glow 2s ease-in-out infinite;
                stroke-opacity: ${brightnessPercent / 100};
              }
              .data {
                text-transform: ${textTransform};
              }
            </style> 
            
            <!-- Simple block base -->
            <rect x="75" y="200" width="30" height="15" rx="1" class="lamp-base" />
            
            <!-- Outer U shape - lamp design -->
            <path style="transform:translate(${translateX}, ${translateY})" d="M145,20 L145,140 Q150,180 155,140 L155,20" class="outer-u" />
            
            <!-- Add a glow behind the light strip when on -->
            ${state === 'on' ? `<path style="transform:translate(${translateX}, ${translateY})" d="M145,25 L145,138 Q150,175 155,138 L155,25" 
                  stroke="${color}" stroke-width="8" stroke-linecap="round" 
                  filter="url(#lightGlow)" opacity="${Math.min(1, brightnessPercent / 80)}" />` : ''}
            
            <!-- Inner light strip -->
            <path style="transform:translate(${translateX}, ${translateY})" d="M145,25 L145,138 Q150,175 155,138 L155,25" 
                  class="${state === 'on' ? 'inner-light-active' : 'inner-light-inactive'}" />
            
            <!-- Status text -->
            <text text-anchor="middle" x="190" y="155" class="data" display="${displayStatus}" 
                  font-size="${fontSizeStatus}" font-weight="${fontWeight}" fill="${nameColor}">
              ${displayState}
            </text>
            
            <!-- Brightness percentage (only shown when on) -->
            <text text-anchor="middle" x="190" y="180" class="data" display="${state === 'on' ? displayBrightness : 'none'}" 
                  font-size="${fontSizeDegrees}" font-weight="${fontWeight}" fill="${nameColor}">
              ${brightnessPercent}%
            </text>
            
            <!-- Entity name -->
            <text text-anchor="middle" x="190" y="105" class="data" display="${displayName1}" 
                  font-size="${fontSizeName}" font-weight="${fontWeight}" fill="${nameColor}">
              ${firstWords}
            </text>
            <text text-anchor="middle" x="190" y="130" class="data" display="${displayName2}" 
                  font-size="${fontSizeName}" font-weight="${fontWeight}" fill="${nameColor}">
              ${restOfName}
            </text>
          </svg>
        </div>
      `;
    ]]]
styles:
  card:
    - position: relative
    - display: block
    - width: 100%
