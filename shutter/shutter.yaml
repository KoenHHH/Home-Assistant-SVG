type: custom:button-card
entity: cover.shutter
show_name: false
show_icon: false
triggers_update:
  - cover.shutter
custom_fields:
  shutter: |
    [[[
      // Get the entity ID of the shutter/blind
      let entity_id = 'cover.shutter';
      
      Get the entity ID of the shutter/blind, use state for %, use displayState for text
      // If open = 100%, if closed = 0%
      let state = states[entity_id].attributes.current_position ?? (states[entity_id].state === 'open' ? 100 : 0);
      let displayState = (states[entity_id].state === 'opening' || states[entity_id].state === 'closing') ? `${states[entity_id].state}...` : states[entity_id].state;

      // Position range (invert if shutter is going the wrong way)
      let minState = 100;
      let maxState = 0;

      // Layout configuration
      let divDisplay = 'flex';
      let widthSVG = '100%';
      let heightSVG = 'auto';
      let paddingDIV = '0';
     
      // Text configuration
      let fontSizeDegrees = '32px';
      let fontSizeName = '32px';
      let fontWeight = 'bold';
      let textTransform = 'uppercase';
      
      // Color configuration for different states
      let color_light = '#b3e5fc';  // Light blue for mostly open
      let color_day = '#64b5f6';    // Medium blue for partially open
      let color_dark = '#506587';   // Dark blue for mostly closed
      let colorShutter = '#506587'; // Color of the shutter bars
      
      // Threshold values for color changes
      let blockHighValue = 70;      // Above this position shows as light color
      let blockMiddleValue = 20;    // Between high and this shows as medium color
                                    // Below this shows as dark color
      
      // Determine window background color based on position
      let color = state > blockHighValue ? color_light : state > blockMiddleValue ? color_day : color_dark;
      let percentageColor = [color];

      // Additional styling options
      let nameColor = 'white';             // Color of entity name
      let displayName1 = 'visible';        // Show/hide first part of name
      let displayName2 = 'visible';        // Show/hide second part of name
      let displayPercentage = 'visible';   // Show/hide percentage

      // Split name configuration
      let wordLimit = 1;  // Number of words on first line

      // Get friendly name of entity or format entity ID
      let entity_name = states[entity_id].attributes?.friendly_name ||
                        entity_id.replace(/cover\./, '').replace(/_/g, ' ');

      // Calculate percentage and ensure it's between 0-100
      let percent = ((state - minState) / (maxState - minState)) * 100;
      percent = Math.max(0, Math.min(100, percent));

      // Calculate shutter fill dimensions
      let fillHeight = Math.round((percent / 100) * 90); // max height is 90
      let clipY = 15; // starting point for fill at top of window
      let transitionDuration = "0.6s";  // Animation duration for smooth effect

      // Split entity name for multi-line display
      let words = entity_name.split(" ");
      let firstWords = words.slice(0, wordLimit).join(" ") || " ";
      let restOfName = words.slice(wordLimit).join(" ") || " ";

      // Generate and return the SVG shutter visualization
      return `
        <div style="display: ${divDisplay}; flex-direction: column; align-items: center; padding: ${paddingDIV};">
          <svg viewBox="0 0 300 240" width="${widthSVG}" height="${heightSVG}" xmlns="http://www.w3.org/2000/svg">
            <style>
              .fill-rect {
                transition: y 1s ease, height 1s ease;
              }
              .data {
                text-transform: ${textTransform};
              }
            </style>   
            
            <!-- Top bar (shutter mounting bar) -->
            <rect x="100" y="10" width="94" height="8" rx="4" ry="4" fill="white" />

            <!-- Window outline shadow -->
            <rect x="120" y="15" width="54" height="90" fill="none" stroke="white" stroke-width="5" opacity="0.7" />

            <!-- Window background -->
            <rect x="120" y="15" width="54" height="90" fill="${color}" stroke="white" stroke-width="7" />

            <!-- Window grid lines -->
            <line x1="148" y1="10" x2="148" y2="105" stroke="white" stroke-width="1" />
            <line x1="120" y1="40" x2="175" y2="40" stroke="white" stroke-width="1" />
            <line x1="120" y1="65" x2="175" y2="65" stroke="white" stroke-width="1" />
            <line x1="120" y1="90" x2="175" y2="90" stroke="white" stroke-width="1" />
            
            <!-- Shutter fill (grows from top to bottom as shutter closes) -->
            <rect x="120" y="${clipY}" width="54" height="${fillHeight}" fill="${colorShutter}" style="transition: height ${transitionDuration};"/>
            
            <!-- Percentage display -->
            <text text-anchor="middle" x="150" y="150" class="data" display="${displayPercentage}" font-size="${fontSizeDegrees}" font-weight="${fontWeight}" fill="${percentageColor}">${state}%</text>
            
            <!-- Entity name - first line -->
            <text text-anchor="middle" x="150" y="190" class="data" display="${displayName1}" font-size="${fontSizeName}" font-weight="${fontWeight}" fill="${nameColor}">${firstWords}</text>
            
            <!-- Entity name - second line -->
            <text text-anchor="middle" x="150" y="220" class="data" display="${displayName2}" font-size="${fontSizeName}" font-weight="${fontWeight}" fill="${nameColor}">${restOfName}</text>
          </svg>
        </div>
      `;
    ]]]
styles:
  card:
    - position: relative
    - display: block
    - width: 100%
